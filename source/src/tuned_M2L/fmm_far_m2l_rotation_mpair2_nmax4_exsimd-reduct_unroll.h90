!----------------------------------------------------------------------
!MODYLAS ver. 1.1.0 
!
!Copyright (c) 2014-2019 Nagoya University
!              2020-2023 The University of Tokyo
!
!Released under the MIT license.
!see https://opensource.org/licenses/MIT
!----------------------------------------------------------------------
!MODYLAS Developers:
!Yoshimichi Andoh, Kazushi Fujimoto, Tatsuya Sakashita, Noriyuki Yoshii, 
!Zhiye Tang, Jiachao Zhang, Yuta Asano, Ryo Urano, Tetsuro Nagai, 
!Atsushi Yamada, Hidekazu Kojima, Kensuke Iwahashi, Fumiyasu Mizutani, 
!Shin-ichi Ichikawa, and Susumu Okazaki.
!----------------------------------------------------------------------
!    integer :: k,p
!    integer :: m1
!    real(4) :: shml_n0, shml_n1, shml_n2, shml_n3, shml_n4
!    real(4) :: tmp_ce_r, tmp_ce_i
!    real(4) :: shrot1_q0_r, shrot1_q0_i, shrot2_q0_r, shrot2_q0_i
!    real(4) :: shrot1_q1_r, shrot1_q1_i, shrot2_q1_r, shrot2_q1_i
!    real(4) :: shrot1_q2_r, shrot1_q2_i, shrot2_q2_r, shrot2_q2_i
!    real(4) :: shrot1_q3_r, shrot1_q3_i, shrot2_q3_r, shrot2_q3_i
!    real(4) :: shrot1_q4_r, shrot1_q4_i, shrot2_q4_r, shrot2_q4_i
!    real(4) :: shinvrot1_q0_r, shinvrot1_q0_i, shinvrot2_q0_r, shinvrot2_q0_i
!    real(4) :: shinvrot1_q1_r, shinvrot1_q1_i, shinvrot2_q1_r, shinvrot2_q1_i
!    real(4) :: shinvrot1_q2_r, shinvrot1_q2_i, shinvrot2_q2_r, shinvrot2_q2_i
!    real(4) :: shinvrot1_q3_r, shinvrot1_q3_i, shinvrot2_q3_r, shinvrot2_q3_i
!    real(4) :: shinvrot1_q4_r, shinvrot1_q4_i, shinvrot2_q4_r, shinvrot2_q4_i
!    real(4) :: wwm_north(lm_length,2,8), wwl_north(lm_length,2,8)
!    real(4) :: wm_q0_1r, wm_q0_1i, wm_q0_2r, wm_q0_2i
!    real(4) :: wm_q1_1r, wm_q1_1i, wm_q1_2r, wm_q1_2i
!    real(4) :: wm_q2_1r, wm_q2_1i, wm_q2_2r, wm_q2_2i
!    real(4) :: wm_q3_1r, wm_q3_1i, wm_q3_2r, wm_q3_2i
!    real(4) :: wm_q4_1r, wm_q4_1i, wm_q4_2r, wm_q4_2i
!    real(4) :: wlnorth_q0_1r, wlnorth_q0_1i, wlnorth_q0_2r, wlnorth_q0_2i
!    real(4) :: wlnorth_q1_1r, wlnorth_q1_1i, wlnorth_q1_2r, wlnorth_q1_2i
!    real(4) :: wlnorth_q2_1r, wlnorth_q2_1i, wlnorth_q2_2r, wlnorth_q2_2i
!    real(4) :: wlnorth_q3_1r, wlnorth_q3_1i, wlnorth_q3_2r, wlnorth_q3_2i
!    real(4) :: wlnorth_q4_1r, wlnorth_q4_1i, wlnorth_q4_2r, wlnorth_q4_2i
!    real(4) :: tmp_1r, tmp_1i, tmp_2r, tmp_2i, tmp_3r, tmp_3i

!  !$omp& private(k,p, m1, tmp_ce_r, tmp_ce_i) &
!  !$omp& private(shml_n0, shml_n1, shml_n2, shml_n3, shml_n4) &
!  !$omp& private(wm_q0_1r, wm_q0_2r) &
!  !$omp& private(wm_q0_1i, wm_q0_2i) &
!  !$omp& private(wm_q1_1r, wm_q1_2r) &
!  !$omp& private(wm_q1_1i, wm_q1_2i) &
!  !$omp& private(wm_q2_1r, wm_q2_2r) &
!  !$omp& private(wm_q2_1i, wm_q2_2i) &
!  !$omp& private(wm_q3_1r, wm_q3_2r) &
!  !$omp& private(wm_q3_1i, wm_q3_2i) &
!  !$omp& private(wm_q4_1r, wm_q4_2r) &
!  !$omp& private(wm_q4_1i, wm_q4_2i) &
!  !$omp& private(shrot1_q0_r, shrot1_q0_i, shrot2_q0_r, shrot2_q0_i) &
!  !$omp& private(shrot1_q1_r, shrot1_q1_i, shrot2_q1_r, shrot2_q1_i) &
!  !$omp& private(shrot1_q2_r, shrot1_q2_i, shrot2_q2_r, shrot2_q2_i) &
!  !$omp& private(shrot1_q3_r, shrot1_q3_i, shrot2_q3_r, shrot2_q3_i) &
!  !$omp& private(shrot1_q4_r, shrot1_q4_i, shrot2_q4_r, shrot2_q4_i) &
!  !$omp& private(shinvrot1_q0_r, shinvrot1_q0_i, shinvrot2_q0_r, shinvrot2_q0_i) &
!  !$omp& private(shinvrot1_q1_r, shinvrot1_q1_i, shinvrot2_q1_r, shinvrot2_q1_i) &
!  !$omp& private(shinvrot1_q2_r, shinvrot1_q2_i, shinvrot2_q2_r, shinvrot2_q2_i) &
!  !$omp& private(shinvrot1_q3_r, shinvrot1_q3_i, shinvrot2_q3_r, shinvrot2_q3_i) &
!  !$omp& private(shinvrot1_q4_r, shinvrot1_q4_i, shinvrot2_q4_r, shinvrot2_q4_i) &
!  !$omp& private(wlnorth_q0_1r, wlnorth_q0_1i, wlnorth_q0_2r, wlnorth_q0_2i) &
!  !$omp& private(wlnorth_q1_1r, wlnorth_q1_1i, wlnorth_q1_2r, wlnorth_q1_2i) &
!  !$omp& private(wlnorth_q2_1r, wlnorth_q2_1i, wlnorth_q2_2r, wlnorth_q2_2i) &
!  !$omp& private(wlnorth_q3_1r, wlnorth_q3_1i, wlnorth_q3_2r, wlnorth_q3_2i) &
!  !$omp& private(wlnorth_q4_1r, wlnorth_q4_1i, wlnorth_q4_2r, wlnorth_q4_2i) &
!  !$omp& private(tmp_1r, tmp_1i, tmp_2r, tmp_2i) &

! SIMD loop type code. For an use of transposed rotation matrix for each J as an input.
! Purpose is to avoid reduction within SIMD to decrease instruction and local recurrence.
! Another purpose is to reduce load/store by making outer loop unrolled.
!
! Drawback is poor parallelism of instruction. But the outer-loop unrolled code will have 
! more instruction level parallelism.
! S. Ichikawa, Jan 2019.

!    integer :: j,k,n,p,q, ind_1dim
!    integer :: m1,m2
!    integer :: m2_b
!    integer :: ind_1dim_b
!    real(4) :: tmp_ce_r, tmp_ce_i
!---- Outer Reduction Loop Type Rolled Code.
!                  wm_north = Czero
!                  wl_north = Czero
!
!                  ! Direct rotation
!                  do j=0,nmax                  ! parallel loop.
!                     m2_b = j*(j+1)/2 + 1               ! translating the indices (j,q) to 1-dim index
!                     ind_1dim_b = j*(j+1)*(2*j+1)/6 + 1 ! translating the indices (j,p,q) to 1-dim index
!                     do q=0,j                  ! reduction loop.
!                        m2 = m2_b + q                   ! translating the indices (j,q) to 1-dim index
!                        ind_1dim = ind_1dim_b + (j+1)*q ! translating the indices (j,p,q) to 1-dim index
!!ocl simd_redundant_vl(5)
!                        do p=0,j               ! parallel loop.
!                           m1 = m2_b + p                ! translating the indices (j,p) to 1-dim index
!                           wm_north(m1,1) = wm_north(m1,1) &
!                                & + wm(m2,1,icz1,icy1,icx1) * sh_rot1(ind_1dim+p,1,irz,iry,irx,ilevel) &
!                                & + wm(m2,2,icz1,icy1,icx1) * sh_rot2(ind_1dim+p,1,irz,iry,irx,ilevel)
!                           wm_north(m1,2) = wm_north(m1,2) &
!                                & + wm(m2,1,icz1,icy1,icx1) * sh_rot1(ind_1dim+p,2,irz,iry,irx,ilevel) &
!                                & + wm(m2,2,icz1,icy1,icx1) * sh_rot2(ind_1dim+p,2,irz,iry,irx,ilevel)
!                        enddo
!                     enddo
!                  enddo
!
!                  ! M2L for z-axis
!                  do j=0,nmax
!                     do n=0,nmax
!                        tmp_shml = shml(j+n,irz,iry,irx,ilevel)
!                        m1 = j*(j+1)/2 + 1 + 0
!                        m2 = n*(n+1)/2 + 1 + 0
!!ocl simd_redundant_vl(5)
!                        do k=0,min(j,n)
!                          wl_north(m1+k,1) = wl_north(m1+k,1) + wm_north(m2+k,1) * tmp_shml
!                          wl_north(m1+k,2) = wl_north(m1+k,2) + wm_north(m2+k,2) * tmp_shml
!                        enddo
!                     enddo
!                  enddo
!
!                  ! Inverse rotation
!                  do j=0,nmax                  ! parallel loop.
!                     m2_b = j*(j+1)/2 + 1               ! translating the indices (j,q) to 1-dim index
!                     ind_1dim_b = j*(j+1)*(2*j+1)/6 + 1 ! translating the indices (j,p,q) to 1-dim index
!                     do q=0,j                  ! reduction loop.
!                        m2 = m2_b + q                   ! translating the indices (j,q) to 1-dim index
!                        ind_1dim = ind_1dim_b + (j+1)*q ! translating the indices (j,p,q) to 1-dim index
!!ocl simd_redundant_vl(5)
!                        do p=0,j               ! parallel loop.
!                           m1 = m2_b + p                ! translating the indices (j,p) to 1-dim index
!                           tmp_ce_r = &
!                                & + wl_north(m2,1) * sh_inv_rot1(ind_1dim+p,1,irz,iry,irx,ilevel) &
!                                & + wl_north(m2,2) * sh_inv_rot2(ind_1dim+p,1,irz,iry,irx,ilevel)
!                           wl_omp(m1,1,icz0,icy0,icx0,iam) = wl_omp(m1,1,icz0,icy0,icx0,iam) + tmp_ce_r
!                           tmp_ce_i = &
!                                & + wl_north(m2,1) * sh_inv_rot1(ind_1dim+p,2,irz,iry,irx,ilevel) &
!                                & + wl_north(m2,2) * sh_inv_rot2(ind_1dim+p,2,irz,iry,irx,ilevel)
!                           wl_omp(m1,2,icz0,icy0,icx0,iam) = wl_omp(m1,2,icz0,icy0,icx0,iam) + tmp_ce_i
!                        enddo
!                     enddo
!                  enddo
!!---- end Outer Reduction Loop Type Rolled Code.

!---- Outer Reduction Loop Type Rolled Code.
                  wwm_north(:,:,1:2) = Czero
                  wwl_north(:,:,1:2) = Czero

                 !! Direct rotation
                  ! j=0, m2_b=1, ind_1dim_b=1
                        wm_q0_1r = wm( 1,1,icz1_1,icy1_1,icx1_1)
                        wm_q0_1i = wm( 1,2,icz1_1,icy1_1,icx1_1)
                        wm_q0_2r = wm( 1,1,icz1_2,icy1_2,icx1_2)
                        wm_q0_2i = wm( 1,2,icz1_2,icy1_2,icx1_2)
                        do p=0,0               ! parallel loop.
                           m1 = 1 + p                ! translating the indices (j,p) to 1-dim index
                           shrot1_q0_r = sh_rot1( 1+p,1,irz,iry,irx,ilevel)
                           shrot1_q0_i = sh_rot1( 1+p,2,irz,iry,irx,ilevel)
                           shrot2_q0_r = sh_rot2( 1+p,1,irz,iry,irx,ilevel)
                           shrot2_q0_i = sh_rot2( 1+p,2,irz,iry,irx,ilevel)

                           wwm_north(m1,1,1) = wwm_north(m1,1,1) + wm_q0_1r * shrot1_q0_r + wm_q0_1i * shrot2_q0_r
                           wwm_north(m1,2,1) = wwm_north(m1,2,1) + wm_q0_1r * shrot1_q0_i + wm_q0_1i * shrot2_q0_i
                           wwm_north(m1,1,2) = wwm_north(m1,1,2) + wm_q0_2r * shrot1_q0_r + wm_q0_2i * shrot2_q0_r
                           wwm_north(m1,2,2) = wwm_north(m1,2,2) + wm_q0_2r * shrot1_q0_i + wm_q0_2i * shrot2_q0_i
                        enddo

                  ! j=1, m2_b=2, ind_1dim_b=2
                        wm_q0_1r = wm( 2,1,icz1_1,icy1_1,icx1_1)
                        wm_q0_1i = wm( 2,2,icz1_1,icy1_1,icx1_1)
                        wm_q0_2r = wm( 2,1,icz1_2,icy1_2,icx1_2)
                        wm_q0_2i = wm( 2,2,icz1_2,icy1_2,icx1_2)
                        wm_q1_1r = wm( 3,1,icz1_1,icy1_1,icx1_1)
                        wm_q1_1i = wm( 3,2,icz1_1,icy1_1,icx1_1)
                        wm_q1_2r = wm( 3,1,icz1_2,icy1_2,icx1_2)
                        wm_q1_2i = wm( 3,2,icz1_2,icy1_2,icx1_2)
!ocl simd_redundant_vl(5)
                        do p=0,1               ! parallel loop.
                           m1 = 2 + p                ! translating the indices (j,p) to 1-dim index
                           shrot1_q0_r = sh_rot1( 2+p,1,irz,iry,irx,ilevel)
                           shrot1_q0_i = sh_rot1( 2+p,2,irz,iry,irx,ilevel)
                           shrot2_q0_r = sh_rot2( 2+p,1,irz,iry,irx,ilevel)
                           shrot2_q0_i = sh_rot2( 2+p,2,irz,iry,irx,ilevel)
                           shrot1_q1_r = sh_rot1( 4+p,1,irz,iry,irx,ilevel)
                           shrot1_q1_i = sh_rot1( 4+p,2,irz,iry,irx,ilevel)
                           shrot2_q1_r = sh_rot2( 4+p,1,irz,iry,irx,ilevel)
                           shrot2_q1_i = sh_rot2( 4+p,2,irz,iry,irx,ilevel)

                           wwm_north(m1,1,1) = wwm_north(m1,1,1) + wm_q0_1r * shrot1_q0_r + wm_q0_1i * shrot2_q0_r &
                                             &                   + wm_q1_1r * shrot1_q1_r + wm_q1_1i * shrot2_q1_r
                           wwm_north(m1,2,1) = wwm_north(m1,2,1) + wm_q0_1r * shrot1_q0_i + wm_q0_1i * shrot2_q0_i &
                                             &                   + wm_q1_1r * shrot1_q1_i + wm_q1_1i * shrot2_q1_i
                           wwm_north(m1,1,2) = wwm_north(m1,1,2) + wm_q0_2r * shrot1_q0_r + wm_q0_2i * shrot2_q0_r &
                                             &                   + wm_q1_2r * shrot1_q1_r + wm_q1_2i * shrot2_q1_r
                           wwm_north(m1,2,2) = wwm_north(m1,2,2) + wm_q0_2r * shrot1_q0_i + wm_q0_2i * shrot2_q0_i &
                                             &                   + wm_q1_2r * shrot1_q1_i + wm_q1_2i * shrot2_q1_i
                        enddo

                  ! j=2, m2_b=4, ind_1dim_b=6
                        wm_q0_1r = wm( 4,1,icz1_1,icy1_1,icx1_1)
                        wm_q0_1i = wm( 4,2,icz1_1,icy1_1,icx1_1)
                        wm_q0_2r = wm( 4,1,icz1_2,icy1_2,icx1_2)
                        wm_q0_2i = wm( 4,2,icz1_2,icy1_2,icx1_2)
                        wm_q1_1r = wm( 5,1,icz1_1,icy1_1,icx1_1)
                        wm_q1_1i = wm( 5,2,icz1_1,icy1_1,icx1_1)
                        wm_q1_2r = wm( 5,1,icz1_2,icy1_2,icx1_2)
                        wm_q1_2i = wm( 5,2,icz1_2,icy1_2,icx1_2)
                        wm_q2_1r = wm( 6,1,icz1_1,icy1_1,icx1_1)
                        wm_q2_1i = wm( 6,2,icz1_1,icy1_1,icx1_1)
                        wm_q2_2r = wm( 6,1,icz1_2,icy1_2,icx1_2)
                        wm_q2_2i = wm( 6,2,icz1_2,icy1_2,icx1_2)
!ocl simd_redundant_vl(5)
                        do p=0,2               ! parallel loop.
                           m1 = 4 + p                ! translating the indices (j,p) to 1-dim index
                           shrot1_q0_r = sh_rot1( 6+p,1,irz,iry,irx,ilevel)
                           shrot1_q0_i = sh_rot1( 6+p,2,irz,iry,irx,ilevel)
                           shrot2_q0_r = sh_rot2( 6+p,1,irz,iry,irx,ilevel)
                           shrot2_q0_i = sh_rot2( 6+p,2,irz,iry,irx,ilevel)
                           shrot1_q1_r = sh_rot1( 9+p,1,irz,iry,irx,ilevel)
                           shrot1_q1_i = sh_rot1( 9+p,2,irz,iry,irx,ilevel)
                           shrot2_q1_r = sh_rot2( 9+p,1,irz,iry,irx,ilevel)
                           shrot2_q1_i = sh_rot2( 9+p,2,irz,iry,irx,ilevel)
                           shrot1_q2_r = sh_rot1(12+p,1,irz,iry,irx,ilevel)
                           shrot1_q2_i = sh_rot1(12+p,2,irz,iry,irx,ilevel)
                           shrot2_q2_r = sh_rot2(12+p,1,irz,iry,irx,ilevel)
                           shrot2_q2_i = sh_rot2(12+p,2,irz,iry,irx,ilevel)

                           wwm_north(m1,1,1) = wwm_north(m1,1,1) + wm_q0_1r * shrot1_q0_r + wm_q0_1i * shrot2_q0_r &
                                             &                   + wm_q1_1r * shrot1_q1_r + wm_q1_1i * shrot2_q1_r &
                                             &                   + wm_q2_1r * shrot1_q2_r + wm_q2_1i * shrot2_q2_r
                           wwm_north(m1,2,1) = wwm_north(m1,2,1) + wm_q0_1r * shrot1_q0_i + wm_q0_1i * shrot2_q0_i &
                                             &                   + wm_q1_1r * shrot1_q1_i + wm_q1_1i * shrot2_q1_i &
                                             &                   + wm_q2_1r * shrot1_q2_i + wm_q2_1i * shrot2_q2_i
                           wwm_north(m1,1,2) = wwm_north(m1,1,2) + wm_q0_2r * shrot1_q0_r + wm_q0_2i * shrot2_q0_r &
                                             &                   + wm_q1_2r * shrot1_q1_r + wm_q1_2i * shrot2_q1_r &
                                             &                   + wm_q2_2r * shrot1_q2_r + wm_q2_2i * shrot2_q2_r
                           wwm_north(m1,2,2) = wwm_north(m1,2,2) + wm_q0_2r * shrot1_q0_i + wm_q0_2i * shrot2_q0_i &
                                             &                   + wm_q1_2r * shrot1_q1_i + wm_q1_2i * shrot2_q1_i &
                                             &                   + wm_q2_2r * shrot1_q2_i + wm_q2_2i * shrot2_q2_i
                        enddo

                  ! j=3, m2_b=7, ind_1dim_b=15
                        wm_q0_1r = wm( 7,1,icz1_1,icy1_1,icx1_1)
                        wm_q0_1i = wm( 7,2,icz1_1,icy1_1,icx1_1)
                        wm_q0_2r = wm( 7,1,icz1_2,icy1_2,icx1_2)
                        wm_q0_2i = wm( 7,2,icz1_2,icy1_2,icx1_2)
                        wm_q1_1r = wm( 8,1,icz1_1,icy1_1,icx1_1)
                        wm_q1_1i = wm( 8,2,icz1_1,icy1_1,icx1_1)
                        wm_q1_2r = wm( 8,1,icz1_2,icy1_2,icx1_2)
                        wm_q1_2i = wm( 8,2,icz1_2,icy1_2,icx1_2)
                        wm_q2_1r = wm( 9,1,icz1_1,icy1_1,icx1_1)
                        wm_q2_1i = wm( 9,2,icz1_1,icy1_1,icx1_1)
                        wm_q2_2r = wm( 9,1,icz1_2,icy1_2,icx1_2)
                        wm_q2_2i = wm( 9,2,icz1_2,icy1_2,icx1_2)
                        wm_q3_1r = wm(10,1,icz1_1,icy1_1,icx1_1)
                        wm_q3_1i = wm(10,2,icz1_1,icy1_1,icx1_1)
                        wm_q3_2r = wm(10,1,icz1_2,icy1_2,icx1_2)
                        wm_q3_2i = wm(10,2,icz1_2,icy1_2,icx1_2)
!ocl simd_redundant_vl(5)
                        do p=0,3               ! parallel loop.
                           m1 = 7 + p                ! translating the indices (j,p) to 1-dim index
                           shrot1_q0_r = sh_rot1(15+p,1,irz,iry,irx,ilevel)
                           shrot1_q0_i = sh_rot1(15+p,2,irz,iry,irx,ilevel)
                           shrot2_q0_r = sh_rot2(15+p,1,irz,iry,irx,ilevel)
                           shrot2_q0_i = sh_rot2(15+p,2,irz,iry,irx,ilevel)
                           shrot1_q1_r = sh_rot1(19+p,1,irz,iry,irx,ilevel)
                           shrot1_q1_i = sh_rot1(19+p,2,irz,iry,irx,ilevel)
                           shrot2_q1_r = sh_rot2(19+p,1,irz,iry,irx,ilevel)
                           shrot2_q1_i = sh_rot2(19+p,2,irz,iry,irx,ilevel)
                           shrot1_q2_r = sh_rot1(23+p,1,irz,iry,irx,ilevel)
                           shrot1_q2_i = sh_rot1(23+p,2,irz,iry,irx,ilevel)
                           shrot2_q2_r = sh_rot2(23+p,1,irz,iry,irx,ilevel)
                           shrot2_q2_i = sh_rot2(23+p,2,irz,iry,irx,ilevel)
                           shrot1_q3_r = sh_rot1(27+p,1,irz,iry,irx,ilevel)
                           shrot1_q3_i = sh_rot1(27+p,2,irz,iry,irx,ilevel)
                           shrot2_q3_r = sh_rot2(27+p,1,irz,iry,irx,ilevel)
                           shrot2_q3_i = sh_rot2(27+p,2,irz,iry,irx,ilevel)

                           wwm_north(m1,1,1) = wwm_north(m1,1,1) + wm_q0_1r * shrot1_q0_r + wm_q0_1i * shrot2_q0_r &
                                             &                   + wm_q1_1r * shrot1_q1_r + wm_q1_1i * shrot2_q1_r &
                                             &                   + wm_q2_1r * shrot1_q2_r + wm_q2_1i * shrot2_q2_r &
                                             &                   + wm_q3_1r * shrot1_q3_r + wm_q3_1i * shrot2_q3_r
                           wwm_north(m1,2,1) = wwm_north(m1,2,1) + wm_q0_1r * shrot1_q0_i + wm_q0_1i * shrot2_q0_i &
                                             &                   + wm_q1_1r * shrot1_q1_i + wm_q1_1i * shrot2_q1_i &
                                             &                   + wm_q2_1r * shrot1_q2_i + wm_q2_1i * shrot2_q2_i &
                                             &                   + wm_q3_1r * shrot1_q3_i + wm_q3_1i * shrot2_q3_i
                           wwm_north(m1,1,2) = wwm_north(m1,1,2) + wm_q0_2r * shrot1_q0_r + wm_q0_2i * shrot2_q0_r &
                                             &                   + wm_q1_2r * shrot1_q1_r + wm_q1_2i * shrot2_q1_r &
                                             &                   + wm_q2_2r * shrot1_q2_r + wm_q2_2i * shrot2_q2_r &
                                             &                   + wm_q3_2r * shrot1_q3_r + wm_q3_2i * shrot2_q3_r
                           wwm_north(m1,2,2) = wwm_north(m1,2,2) + wm_q0_2r * shrot1_q0_i + wm_q0_2i * shrot2_q0_i &
                                             &                   + wm_q1_2r * shrot1_q1_i + wm_q1_2i * shrot2_q1_i &
                                             &                   + wm_q2_2r * shrot1_q2_i + wm_q2_2i * shrot2_q2_i &
                                             &                   + wm_q3_2r * shrot1_q3_i + wm_q3_2i * shrot2_q3_i
                        enddo

                  ! j=4, m2_b=11, ind_1dim_b=31
                        wm_q0_1r = wm(11,1,icz1_1,icy1_1,icx1_1)
                        wm_q0_1i = wm(11,2,icz1_1,icy1_1,icx1_1)
                        wm_q0_2r = wm(11,1,icz1_2,icy1_2,icx1_2)
                        wm_q0_2i = wm(11,2,icz1_2,icy1_2,icx1_2)
                        wm_q1_1r = wm(12,1,icz1_1,icy1_1,icx1_1)
                        wm_q1_1i = wm(12,2,icz1_1,icy1_1,icx1_1)
                        wm_q1_2r = wm(12,1,icz1_2,icy1_2,icx1_2)
                        wm_q1_2i = wm(12,2,icz1_2,icy1_2,icx1_2)
                        wm_q2_1r = wm(13,1,icz1_1,icy1_1,icx1_1)
                        wm_q2_1i = wm(13,2,icz1_1,icy1_1,icx1_1)
                        wm_q2_2r = wm(13,1,icz1_2,icy1_2,icx1_2)
                        wm_q2_2i = wm(13,2,icz1_2,icy1_2,icx1_2)
                        wm_q3_1r = wm(14,1,icz1_1,icy1_1,icx1_1)
                        wm_q3_1i = wm(14,2,icz1_1,icy1_1,icx1_1)
                        wm_q3_2r = wm(14,1,icz1_2,icy1_2,icx1_2)
                        wm_q3_2i = wm(14,2,icz1_2,icy1_2,icx1_2)
                        wm_q4_1r = wm(15,1,icz1_1,icy1_1,icx1_1)
                        wm_q4_1i = wm(15,2,icz1_1,icy1_1,icx1_1)
                        wm_q4_2r = wm(15,1,icz1_2,icy1_2,icx1_2)
                        wm_q4_2i = wm(15,2,icz1_2,icy1_2,icx1_2)
!ocl simd_redundant_vl(5)
                        do p=0,4               ! parallel loop.
                           m1 = 11 + p                ! translating the indices (j,p) to 1-dim index
                           shrot1_q0_r = sh_rot1(31+p,1,irz,iry,irx,ilevel)
                           shrot1_q0_i = sh_rot1(31+p,2,irz,iry,irx,ilevel)
                           shrot2_q0_r = sh_rot2(31+p,1,irz,iry,irx,ilevel)
                           shrot2_q0_i = sh_rot2(31+p,2,irz,iry,irx,ilevel)
                           shrot1_q1_r = sh_rot1(36+p,1,irz,iry,irx,ilevel)
                           shrot1_q1_i = sh_rot1(36+p,2,irz,iry,irx,ilevel)
                           shrot2_q1_r = sh_rot2(36+p,1,irz,iry,irx,ilevel)
                           shrot2_q1_i = sh_rot2(36+p,2,irz,iry,irx,ilevel)
                           shrot1_q2_r = sh_rot1(41+p,1,irz,iry,irx,ilevel)
                           shrot1_q2_i = sh_rot1(41+p,2,irz,iry,irx,ilevel)
                           shrot2_q2_r = sh_rot2(41+p,1,irz,iry,irx,ilevel)
                           shrot2_q2_i = sh_rot2(41+p,2,irz,iry,irx,ilevel)
                           shrot1_q3_r = sh_rot1(46+p,1,irz,iry,irx,ilevel)
                           shrot1_q3_i = sh_rot1(46+p,2,irz,iry,irx,ilevel)
                           shrot2_q3_r = sh_rot2(46+p,1,irz,iry,irx,ilevel)
                           shrot2_q3_i = sh_rot2(46+p,2,irz,iry,irx,ilevel)
                           shrot1_q4_r = sh_rot1(51+p,1,irz,iry,irx,ilevel)
                           shrot1_q4_i = sh_rot1(51+p,2,irz,iry,irx,ilevel)
                           shrot2_q4_r = sh_rot2(51+p,1,irz,iry,irx,ilevel)
                           shrot2_q4_i = sh_rot2(51+p,2,irz,iry,irx,ilevel)

                           wwm_north(m1,1,1) = wwm_north(m1,1,1) + wm_q0_1r * shrot1_q0_r + wm_q0_1i * shrot2_q0_r &
                                             &                   + wm_q1_1r * shrot1_q1_r + wm_q1_1i * shrot2_q1_r &
                                             &                   + wm_q2_1r * shrot1_q2_r + wm_q2_1i * shrot2_q2_r &
                                             &                   + wm_q3_1r * shrot1_q3_r + wm_q3_1i * shrot2_q3_r &
                                             &                   + wm_q4_1r * shrot1_q4_r + wm_q4_1i * shrot2_q4_r
                           wwm_north(m1,2,1) = wwm_north(m1,2,1) + wm_q0_1r * shrot1_q0_i + wm_q0_1i * shrot2_q0_i &
                                             &                   + wm_q1_1r * shrot1_q1_i + wm_q1_1i * shrot2_q1_i &
                                             &                   + wm_q2_1r * shrot1_q2_i + wm_q2_1i * shrot2_q2_i &
                                             &                   + wm_q3_1r * shrot1_q3_i + wm_q3_1i * shrot2_q3_i &
                                             &                   + wm_q4_1r * shrot1_q4_i + wm_q4_1i * shrot2_q4_i
                           wwm_north(m1,1,2) = wwm_north(m1,1,2) + wm_q0_2r * shrot1_q0_r + wm_q0_2i * shrot2_q0_r &
                                             &                   + wm_q1_2r * shrot1_q1_r + wm_q1_2i * shrot2_q1_r &
                                             &                   + wm_q2_2r * shrot1_q2_r + wm_q2_2i * shrot2_q2_r &
                                             &                   + wm_q3_2r * shrot1_q3_r + wm_q3_2i * shrot2_q3_r &
                                             &                   + wm_q4_2r * shrot1_q4_r + wm_q4_2i * shrot2_q4_r
                           wwm_north(m1,2,2) = wwm_north(m1,2,2) + wm_q0_2r * shrot1_q0_i + wm_q0_2i * shrot2_q0_i &
                                             &                   + wm_q1_2r * shrot1_q1_i + wm_q1_2i * shrot2_q1_i &
                                             &                   + wm_q2_2r * shrot1_q2_i + wm_q2_2i * shrot2_q2_i &
                                             &                   + wm_q3_2r * shrot1_q3_i + wm_q3_2i * shrot2_q3_i &
                                             &                   + wm_q4_2r * shrot1_q4_i + wm_q4_2i * shrot2_q4_i
                        enddo

                 !! M2L for z-axis
                  ! j=0
                            wwl_north( 1  ,1, 1) = wwl_north( 1  ,1, 1) &
                    ! n=0
                               & + wwm_north( 1  ,1, 1) * shml( 0,irz,iry,irx,ilevel) &
                    ! n=1
                               & + wwm_north( 2  ,1, 1) * shml( 1,irz,iry,irx,ilevel) &
                    ! n=2
                               & + wwm_north( 4  ,1, 1) * shml( 2,irz,iry,irx,ilevel) &
                    ! n=3
                               & + wwm_north( 7  ,1, 1) * shml( 3,irz,iry,irx,ilevel) &
                    ! n=4
                               & + wwm_north(11  ,1, 1) * shml( 4,irz,iry,irx,ilevel)

                            wwl_north( 1  ,2, 1) = wwl_north( 1  ,2, 1) &
                    ! n=0
                               & + wwm_north( 1  ,2, 1) * shml( 0,irz,iry,irx,ilevel) &
                    ! n=1
                               & + wwm_north( 2  ,2, 1) * shml( 1,irz,iry,irx,ilevel) &
                    ! n=2
                               & + wwm_north( 4  ,2, 1) * shml( 2,irz,iry,irx,ilevel) &
                    ! n=3
                               & + wwm_north( 7  ,2, 1) * shml( 3,irz,iry,irx,ilevel) &
                    ! n=4
                               & + wwm_north(11  ,2, 1) * shml( 4,irz,iry,irx,ilevel)

                            wwl_north( 1  ,1, 2) = wwl_north( 1  ,1, 2) &
                    ! n=0
                               & + wwm_north( 1  ,1, 2) * shml( 0,irz,iry,irx,ilevel) &
                    ! n=1
                               & + wwm_north( 2  ,1, 2) * shml( 1,irz,iry,irx,ilevel) &
                    ! n=2
                               & + wwm_north( 4  ,1, 2) * shml( 2,irz,iry,irx,ilevel) &
                    ! n=3
                               & + wwm_north( 7  ,1, 2) * shml( 3,irz,iry,irx,ilevel) &
                    ! n=4
                               & + wwm_north(11  ,1, 2) * shml( 4,irz,iry,irx,ilevel)

                            wwl_north( 1  ,2, 2) = wwl_north( 1  ,2, 2) &
                    ! n=0
                               & + wwm_north( 1  ,2, 2) * shml( 0,irz,iry,irx,ilevel) &
                    ! n=1
                               & + wwm_north( 2  ,2, 2) * shml( 1,irz,iry,irx,ilevel) &
                    ! n=2
                               & + wwm_north( 4  ,2, 2) * shml( 2,irz,iry,irx,ilevel) &
                    ! n=3
                               & + wwm_north( 7  ,2, 2) * shml( 3,irz,iry,irx,ilevel) &
                    ! n=4
                               & + wwm_north(11  ,2, 2) * shml( 4,irz,iry,irx,ilevel)

                  ! j=1
                        shml_n0 = shml( 1,irz,iry,irx,ilevel)
                        shml_n1 = shml( 2,irz,iry,irx,ilevel)
                        shml_n2 = shml( 3,irz,iry,irx,ilevel)
                        shml_n3 = shml( 4,irz,iry,irx,ilevel)
                        shml_n4 = shml( 5,irz,iry,irx,ilevel)
!ocl simd_redundant_vl(5)
                        do k=0,1
                          tmp_1r = Czero; tmp_1i = Czero
                          tmp_2r = Czero; tmp_2i = Czero
                    ! n=0
                          if(k < 1) then
                            tmp_1r = tmp_1r + wwm_north( 1+k,1,1) * shml_n0
                            tmp_1i = tmp_1i + wwm_north( 1+k,2,1) * shml_n0
                            tmp_2r = tmp_2r + wwm_north( 1+k,1,2) * shml_n0
                            tmp_2i = tmp_2i + wwm_north( 1+k,2,2) * shml_n0
                          endif
                    ! n=1
                            tmp_1r = tmp_1r + wwm_north( 2+k,1,1) * shml_n1
                            tmp_1i = tmp_1i + wwm_north( 2+k,2,1) * shml_n1
                            tmp_2r = tmp_2r + wwm_north( 2+k,1,2) * shml_n1
                            tmp_2i = tmp_2i + wwm_north( 2+k,2,2) * shml_n1
                    ! n=2
                            tmp_1r = tmp_1r + wwm_north( 4+k,1,1) * shml_n2
                            tmp_1i = tmp_1i + wwm_north( 4+k,2,1) * shml_n2
                            tmp_2r = tmp_2r + wwm_north( 4+k,1,2) * shml_n2
                            tmp_2i = tmp_2i + wwm_north( 4+k,2,2) * shml_n2
                    ! n=3
                            tmp_1r = tmp_1r + wwm_north( 7+k,1,1) * shml_n3
                            tmp_1i = tmp_1i + wwm_north( 7+k,2,1) * shml_n3
                            tmp_2r = tmp_2r + wwm_north( 7+k,1,2) * shml_n3
                            tmp_2i = tmp_2i + wwm_north( 7+k,2,2) * shml_n3
                    ! n=4
                            tmp_1r = tmp_1r + wwm_north(11+k,1,1) * shml_n4
                            tmp_1i = tmp_1i + wwm_north(11+k,2,1) * shml_n4
                            tmp_2r = tmp_2r + wwm_north(11+k,1,2) * shml_n4
                            tmp_2i = tmp_2i + wwm_north(11+k,2,2) * shml_n4

                            wwl_north( 2+k,1,1) = wwl_north( 2+k,1,1) + tmp_1r
                            wwl_north( 2+k,2,1) = wwl_north( 2+k,2,1) + tmp_1i
                            wwl_north( 2+k,1,2) = wwl_north( 2+k,1,2) + tmp_2r
                            wwl_north( 2+k,2,2) = wwl_north( 2+k,2,2) + tmp_2i

                        end do

                  ! j=2
                        shml_n0 = shml( 2,irz,iry,irx,ilevel)
                        shml_n1 = shml( 3,irz,iry,irx,ilevel)
                        shml_n2 = shml( 4,irz,iry,irx,ilevel)
                        shml_n3 = shml( 5,irz,iry,irx,ilevel)
                        shml_n4 = shml( 6,irz,iry,irx,ilevel)
!ocl simd_redundant_vl(5)
                        do k=0,2
                          tmp_1r = Czero; tmp_1i = Czero
                          tmp_2r = Czero; tmp_2i = Czero
                    ! n=0
                          if(k < 1) then
                            tmp_1r = tmp_1r + wwm_north( 1+k,1,1) * shml_n0
                            tmp_1i = tmp_1i + wwm_north( 1+k,2,1) * shml_n0
                            tmp_2r = tmp_2r + wwm_north( 1+k,1,2) * shml_n0
                            tmp_2i = tmp_2i + wwm_north( 1+k,2,2) * shml_n0
                          endif
                    ! n=1
                          if(k < 2) then
                            tmp_1r = tmp_1r + wwm_north( 2+k,1,1) * shml_n1
                            tmp_1i = tmp_1i + wwm_north( 2+k,2,1) * shml_n1
                            tmp_2r = tmp_2r + wwm_north( 2+k,1,2) * shml_n1
                            tmp_2i = tmp_2i + wwm_north( 2+k,2,2) * shml_n1
                          endif
                    ! n=2
                            tmp_1r = tmp_1r + wwm_north( 4+k,1,1) * shml_n2
                            tmp_1i = tmp_1i + wwm_north( 4+k,2,1) * shml_n2
                            tmp_2r = tmp_2r + wwm_north( 4+k,1,2) * shml_n2
                            tmp_2i = tmp_2i + wwm_north( 4+k,2,2) * shml_n2
                    ! n=3
                            tmp_1r = tmp_1r + wwm_north( 7+k,1,1) * shml_n3
                            tmp_1i = tmp_1i + wwm_north( 7+k,2,1) * shml_n3
                            tmp_2r = tmp_2r + wwm_north( 7+k,1,2) * shml_n3
                            tmp_2i = tmp_2i + wwm_north( 7+k,2,2) * shml_n3
                    ! n=4
                            tmp_1r = tmp_1r + wwm_north(11+k,1,1) * shml_n4
                            tmp_1i = tmp_1i + wwm_north(11+k,2,1) * shml_n4
                            tmp_2r = tmp_2r + wwm_north(11+k,1,2) * shml_n4
                            tmp_2i = tmp_2i + wwm_north(11+k,2,2) * shml_n4

                            wwl_north( 4+k,1,1) = wwl_north( 4+k,1,1) + tmp_1r
                            wwl_north( 4+k,2,1) = wwl_north( 4+k,2,1) + tmp_1i
                            wwl_north( 4+k,1,2) = wwl_north( 4+k,1,2) + tmp_2r
                            wwl_north( 4+k,2,2) = wwl_north( 4+k,2,2) + tmp_2i

                        end do

                  ! j=3
                        shml_n0 = shml( 3,irz,iry,irx,ilevel)
                        shml_n1 = shml( 4,irz,iry,irx,ilevel)
                        shml_n2 = shml( 5,irz,iry,irx,ilevel)
                        shml_n3 = shml( 6,irz,iry,irx,ilevel)
                        shml_n4 = shml( 7,irz,iry,irx,ilevel)
!ocl simd_redundant_vl(5)
                        do k=0,3
                          tmp_1r = Czero; tmp_1i = Czero
                          tmp_2r = Czero; tmp_2i = Czero
                    ! n=0
                          if(k < 1) then
                            tmp_1r = tmp_1r + wwm_north( 1+k,1,1) * shml_n0
                            tmp_1i = tmp_1i + wwm_north( 1+k,2,1) * shml_n0
                            tmp_2r = tmp_2r + wwm_north( 1+k,1,2) * shml_n0
                            tmp_2i = tmp_2i + wwm_north( 1+k,2,2) * shml_n0
                          endif
                    ! n=1
                          if(k < 2) then
                            tmp_1r = tmp_1r + wwm_north( 2+k,1,1) * shml_n1
                            tmp_1i = tmp_1i + wwm_north( 2+k,2,1) * shml_n1
                            tmp_2r = tmp_2r + wwm_north( 2+k,1,2) * shml_n1
                            tmp_2i = tmp_2i + wwm_north( 2+k,2,2) * shml_n1
                          endif
                    ! n=2
                          if(k < 3) then
                            tmp_1r = tmp_1r + wwm_north( 4+k,1,1) * shml_n2
                            tmp_1i = tmp_1i + wwm_north( 4+k,2,1) * shml_n2
                            tmp_2r = tmp_2r + wwm_north( 4+k,1,2) * shml_n2
                            tmp_2i = tmp_2i + wwm_north( 4+k,2,2) * shml_n2
                          endif
                    ! n=3
                            tmp_1r = tmp_1r + wwm_north( 7+k,1,1) * shml_n3
                            tmp_1i = tmp_1i + wwm_north( 7+k,2,1) * shml_n3
                            tmp_2r = tmp_2r + wwm_north( 7+k,1,2) * shml_n3
                            tmp_2i = tmp_2i + wwm_north( 7+k,2,2) * shml_n3
                    ! n=4
                            tmp_1r = tmp_1r + wwm_north(11+k,1,1) * shml_n4
                            tmp_1i = tmp_1i + wwm_north(11+k,2,1) * shml_n4
                            tmp_2r = tmp_2r + wwm_north(11+k,1,2) * shml_n4
                            tmp_2i = tmp_2i + wwm_north(11+k,2,2) * shml_n4

                            wwl_north( 7+k,1,1) = wwl_north( 7+k,1,1) + tmp_1r
                            wwl_north( 7+k,2,1) = wwl_north( 7+k,2,1) + tmp_1i
                            wwl_north( 7+k,1,2) = wwl_north( 7+k,1,2) + tmp_2r
                            wwl_north( 7+k,2,2) = wwl_north( 7+k,2,2) + tmp_2i

                        end do

                  ! j=4
                        shml_n0 = shml( 4,irz,iry,irx,ilevel)
                        shml_n1 = shml( 5,irz,iry,irx,ilevel)
                        shml_n2 = shml( 6,irz,iry,irx,ilevel)
                        shml_n3 = shml( 7,irz,iry,irx,ilevel)
                        shml_n4 = shml( 8,irz,iry,irx,ilevel)
!ocl simd_redundant_vl(5)
                        do k=0,4
                          tmp_1r = Czero; tmp_1i = Czero
                          tmp_2r = Czero; tmp_2i = Czero
                    ! n=0
                          if(k < 1) then
                            tmp_1r = tmp_1r + wwm_north( 1+k,1,1) * shml_n0
                            tmp_1i = tmp_1i + wwm_north( 1+k,2,1) * shml_n0
                            tmp_2r = tmp_2r + wwm_north( 1+k,1,2) * shml_n0
                            tmp_2i = tmp_2i + wwm_north( 1+k,2,2) * shml_n0
                          endif
                    ! n=1
                          if(k < 2) then
                            tmp_1r = tmp_1r + wwm_north( 2+k,1,1) * shml_n1
                            tmp_1i = tmp_1i + wwm_north( 2+k,2,1) * shml_n1
                            tmp_2r = tmp_2r + wwm_north( 2+k,1,2) * shml_n1
                            tmp_2i = tmp_2i + wwm_north( 2+k,2,2) * shml_n1
                          endif
                    ! n=2
                          if(k < 3) then
                            tmp_1r = tmp_1r + wwm_north( 4+k,1,1) * shml_n2
                            tmp_1i = tmp_1i + wwm_north( 4+k,2,1) * shml_n2
                            tmp_2r = tmp_2r + wwm_north( 4+k,1,2) * shml_n2
                            tmp_2i = tmp_2i + wwm_north( 4+k,2,2) * shml_n2
                          endif
                    ! n=3
                          if(k < 4) then
                            tmp_1r = tmp_1r + wwm_north( 7+k,1,1) * shml_n3
                            tmp_1i = tmp_1i + wwm_north( 7+k,2,1) * shml_n3
                            tmp_2r = tmp_2r + wwm_north( 7+k,1,2) * shml_n3
                            tmp_2i = tmp_2i + wwm_north( 7+k,2,2) * shml_n3
                          endif
                    ! n=4
                            tmp_1r = tmp_1r + wwm_north(11+k,1,1) * shml_n4
                            tmp_1i = tmp_1i + wwm_north(11+k,2,1) * shml_n4
                            tmp_2r = tmp_2r + wwm_north(11+k,1,2) * shml_n4
                            tmp_2i = tmp_2i + wwm_north(11+k,2,2) * shml_n4

                            wwl_north(11+k,1,1) = wwl_north(11+k,1,1) + tmp_1r
                            wwl_north(11+k,2,1) = wwl_north(11+k,2,1) + tmp_1i
                            wwl_north(11+k,1,2) = wwl_north(11+k,1,2) + tmp_2r
                            wwl_north(11+k,2,2) = wwl_north(11+k,2,2) + tmp_2i

                        end do

                 !! Inverse rotation
                  ! j=0, m2_b=1, ind_1dim_b=1
                        wlnorth_q0_1r = wwl_north( 1,1,1)
                        wlnorth_q0_1i = wwl_north( 1,2,1)
                        wlnorth_q0_2r = wwl_north( 1,1,2)
                        wlnorth_q0_2i = wwl_north( 1,2,2)

                        do p=0,0               ! parallel loop.
                           m1 = 1 + p                ! translating the indices (j,p) to 1-dim index
                           shinvrot1_q0_r = sh_inv_rot1( 1+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q0_i = sh_inv_rot1( 1+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q0_r = sh_inv_rot2( 1+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q0_i = sh_inv_rot2( 1+p,2,irz,iry,irx,ilevel)

                           tmp_ce_r = wlnorth_q0_1r * shinvrot1_q0_r + wlnorth_q0_1i * shinvrot2_q0_r
                           tmp_ce_i = wlnorth_q0_1r * shinvrot1_q0_i + wlnorth_q0_1i * shinvrot2_q0_i
                           wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_i

                           tmp_ce_r = wlnorth_q0_2r * shinvrot1_q0_r + wlnorth_q0_2i * shinvrot2_q0_r
                           tmp_ce_i = wlnorth_q0_2r * shinvrot1_q0_i + wlnorth_q0_2i * shinvrot2_q0_i
                           wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_i
                        enddo

                  ! j=1, m2_b=2, ind_1dim_b=2
                        wlnorth_q0_1r = wwl_north( 2,1,1)
                        wlnorth_q0_1i = wwl_north( 2,2,1)
                        wlnorth_q0_2r = wwl_north( 2,1,2)
                        wlnorth_q0_2i = wwl_north( 2,2,2)
                        wlnorth_q1_1r = wwl_north( 3,1,1)
                        wlnorth_q1_1i = wwl_north( 3,2,1)
                        wlnorth_q1_2r = wwl_north( 3,1,2)
                        wlnorth_q1_2i = wwl_north( 3,2,2)

!ocl simd_redundant_vl(5)
                        do p=0,1               ! parallel loop.
                           m1 = 2 + p                ! translating the indices (j,p) to 1-dim index
                           shinvrot1_q0_r = sh_inv_rot1( 2+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q0_i = sh_inv_rot1( 2+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q0_r = sh_inv_rot2( 2+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q0_i = sh_inv_rot2( 2+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q1_r = sh_inv_rot1( 4+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q1_i = sh_inv_rot1( 4+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q1_r = sh_inv_rot2( 4+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q1_i = sh_inv_rot2( 4+p,2,irz,iry,irx,ilevel)

                           tmp_ce_r = wlnorth_q0_1r * shinvrot1_q0_r + wlnorth_q0_1i * shinvrot2_q0_r &
                                  & + wlnorth_q1_1r * shinvrot1_q1_r + wlnorth_q1_1i * shinvrot2_q1_r
                           tmp_ce_i = wlnorth_q0_1r * shinvrot1_q0_i + wlnorth_q0_1i * shinvrot2_q0_i &
                                  & + wlnorth_q1_1r * shinvrot1_q1_i + wlnorth_q1_1i * shinvrot2_q1_i
                           wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_i

                           tmp_ce_r = wlnorth_q0_2r * shinvrot1_q0_r + wlnorth_q0_2i * shinvrot2_q0_r &
                                  & + wlnorth_q1_2r * shinvrot1_q1_r + wlnorth_q1_2i * shinvrot2_q1_r
                           tmp_ce_i = wlnorth_q0_2r * shinvrot1_q0_i + wlnorth_q0_2i * shinvrot2_q0_i &
                                  & + wlnorth_q1_2r * shinvrot1_q1_i + wlnorth_q1_2i * shinvrot2_q1_i
                           wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_i
                        enddo

                  ! j=2, m2_b=4, ind_1dim_b=6
                        wlnorth_q0_1r = wwl_north( 4,1,1)
                        wlnorth_q0_1i = wwl_north( 4,2,1)
                        wlnorth_q0_2r = wwl_north( 4,1,2)
                        wlnorth_q0_2i = wwl_north( 4,2,2)
                        wlnorth_q1_1r = wwl_north( 5,1,1)
                        wlnorth_q1_1i = wwl_north( 5,2,1)
                        wlnorth_q1_2r = wwl_north( 5,1,2)
                        wlnorth_q1_2i = wwl_north( 5,2,2)
                        wlnorth_q2_1r = wwl_north( 6,1,1)
                        wlnorth_q2_1i = wwl_north( 6,2,1)
                        wlnorth_q2_2r = wwl_north( 6,1,2)
                        wlnorth_q2_2i = wwl_north( 6,2,2)

!ocl simd_redundant_vl(5)
                        do p=0,2               ! parallel loop.
                           m1 = 4 + p                ! translating the indices (j,p) to 1-dim index
                           shinvrot1_q0_r = sh_inv_rot1( 6+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q0_i = sh_inv_rot1( 6+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q0_r = sh_inv_rot2( 6+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q0_i = sh_inv_rot2( 6+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q1_r = sh_inv_rot1( 9+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q1_i = sh_inv_rot1( 9+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q1_r = sh_inv_rot2( 9+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q1_i = sh_inv_rot2( 9+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q2_r = sh_inv_rot1(12+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q2_i = sh_inv_rot1(12+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q2_r = sh_inv_rot2(12+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q2_i = sh_inv_rot2(12+p,2,irz,iry,irx,ilevel)

                           tmp_ce_r = wlnorth_q0_1r * shinvrot1_q0_r + wlnorth_q0_1i * shinvrot2_q0_r &
                                  & + wlnorth_q1_1r * shinvrot1_q1_r + wlnorth_q1_1i * shinvrot2_q1_r &
                                  & + wlnorth_q2_1r * shinvrot1_q2_r + wlnorth_q2_1i * shinvrot2_q2_r
                           tmp_ce_i = wlnorth_q0_1r * shinvrot1_q0_i + wlnorth_q0_1i * shinvrot2_q0_i &
                                  & + wlnorth_q1_1r * shinvrot1_q1_i + wlnorth_q1_1i * shinvrot2_q1_i &
                                  & + wlnorth_q2_1r * shinvrot1_q2_i + wlnorth_q2_1i * shinvrot2_q2_i
                           wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_i

                           tmp_ce_r = wlnorth_q0_2r * shinvrot1_q0_r + wlnorth_q0_2i * shinvrot2_q0_r &
                                  & + wlnorth_q1_2r * shinvrot1_q1_r + wlnorth_q1_2i * shinvrot2_q1_r &
                                  & + wlnorth_q2_2r * shinvrot1_q2_r + wlnorth_q2_2i * shinvrot2_q2_r
                           tmp_ce_i = wlnorth_q0_2r * shinvrot1_q0_i + wlnorth_q0_2i * shinvrot2_q0_i &
                                  & + wlnorth_q1_2r * shinvrot1_q1_i + wlnorth_q1_2i * shinvrot2_q1_i &
                                  & + wlnorth_q2_2r * shinvrot1_q2_i + wlnorth_q2_2i * shinvrot2_q2_i
                           wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_i
                        enddo

                  ! j=3, m2_b=7, ind_1dim_b=15
                        wlnorth_q0_1r = wwl_north( 7,1,1)
                        wlnorth_q0_1i = wwl_north( 7,2,1)
                        wlnorth_q0_2r = wwl_north( 7,1,2)
                        wlnorth_q0_2i = wwl_north( 7,2,2)
                        wlnorth_q1_1r = wwl_north( 8,1,1)
                        wlnorth_q1_1i = wwl_north( 8,2,1)
                        wlnorth_q1_2r = wwl_north( 8,1,2)
                        wlnorth_q1_2i = wwl_north( 8,2,2)
                        wlnorth_q2_1r = wwl_north( 9,1,1)
                        wlnorth_q2_1i = wwl_north( 9,2,1)
                        wlnorth_q2_2r = wwl_north( 9,1,2)
                        wlnorth_q2_2i = wwl_north( 9,2,2)
                        wlnorth_q3_1r = wwl_north(10,1,1)
                        wlnorth_q3_1i = wwl_north(10,2,1)
                        wlnorth_q3_2r = wwl_north(10,1,2)
                        wlnorth_q3_2i = wwl_north(10,2,2)

!ocl simd_redundant_vl(5)
                        do p=0,3               ! parallel loop.
                           m1 = 7 + p                ! translating the indices (j,p) to 1-dim index
                           shinvrot1_q0_r = sh_inv_rot1(15+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q0_i = sh_inv_rot1(15+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q0_r = sh_inv_rot2(15+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q0_i = sh_inv_rot2(15+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q1_r = sh_inv_rot1(19+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q1_i = sh_inv_rot1(19+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q1_r = sh_inv_rot2(19+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q1_i = sh_inv_rot2(19+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q2_r = sh_inv_rot1(23+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q2_i = sh_inv_rot1(23+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q2_r = sh_inv_rot2(23+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q2_i = sh_inv_rot2(23+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q3_r = sh_inv_rot1(27+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q3_i = sh_inv_rot1(27+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q3_r = sh_inv_rot2(27+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q3_i = sh_inv_rot2(27+p,2,irz,iry,irx,ilevel)

                           tmp_ce_r = wlnorth_q0_1r * shinvrot1_q0_r + wlnorth_q0_1i * shinvrot2_q0_r &
                                  & + wlnorth_q1_1r * shinvrot1_q1_r + wlnorth_q1_1i * shinvrot2_q1_r &
                                  & + wlnorth_q2_1r * shinvrot1_q2_r + wlnorth_q2_1i * shinvrot2_q2_r &
                                  & + wlnorth_q3_1r * shinvrot1_q3_r + wlnorth_q3_1i * shinvrot2_q3_r
                           tmp_ce_i = wlnorth_q0_1r * shinvrot1_q0_i + wlnorth_q0_1i * shinvrot2_q0_i &
                                  & + wlnorth_q1_1r * shinvrot1_q1_i + wlnorth_q1_1i * shinvrot2_q1_i &
                                  & + wlnorth_q2_1r * shinvrot1_q2_i + wlnorth_q2_1i * shinvrot2_q2_i &
                                  & + wlnorth_q3_1r * shinvrot1_q3_i + wlnorth_q3_1i * shinvrot2_q3_i
                           wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_i

                           tmp_ce_r = wlnorth_q0_2r * shinvrot1_q0_r + wlnorth_q0_2i * shinvrot2_q0_r &
                                  & + wlnorth_q1_2r * shinvrot1_q1_r + wlnorth_q1_2i * shinvrot2_q1_r &
                                  & + wlnorth_q2_2r * shinvrot1_q2_r + wlnorth_q2_2i * shinvrot2_q2_r &
                                  & + wlnorth_q3_2r * shinvrot1_q3_r + wlnorth_q3_2i * shinvrot2_q3_r
                           tmp_ce_i = wlnorth_q0_2r * shinvrot1_q0_i + wlnorth_q0_2i * shinvrot2_q0_i &
                                  & + wlnorth_q1_2r * shinvrot1_q1_i + wlnorth_q1_2i * shinvrot2_q1_i &
                                  & + wlnorth_q2_2r * shinvrot1_q2_i + wlnorth_q2_2i * shinvrot2_q2_i &
                                  & + wlnorth_q3_2r * shinvrot1_q3_i + wlnorth_q3_2i * shinvrot2_q3_i
                           wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_i
                        enddo

                  ! j=4, m2_b=11, ind_1dim_b=31
                        wlnorth_q0_1r = wwl_north(11,1,1)
                        wlnorth_q0_1i = wwl_north(11,2,1)
                        wlnorth_q0_2r = wwl_north(11,1,2)
                        wlnorth_q0_2i = wwl_north(11,2,2)
                        wlnorth_q1_1r = wwl_north(12,1,1)
                        wlnorth_q1_1i = wwl_north(12,2,1)
                        wlnorth_q1_2r = wwl_north(12,1,2)
                        wlnorth_q1_2i = wwl_north(12,2,2)
                        wlnorth_q2_1r = wwl_north(13,1,1)
                        wlnorth_q2_1i = wwl_north(13,2,1)
                        wlnorth_q2_2r = wwl_north(13,1,2)
                        wlnorth_q2_2i = wwl_north(13,2,2)
                        wlnorth_q3_1r = wwl_north(14,1,1)
                        wlnorth_q3_1i = wwl_north(14,2,1)
                        wlnorth_q3_2r = wwl_north(14,1,2)
                        wlnorth_q3_2i = wwl_north(14,2,2)
                        wlnorth_q4_1r = wwl_north(15,1,1)
                        wlnorth_q4_1i = wwl_north(15,2,1)
                        wlnorth_q4_2r = wwl_north(15,1,2)
                        wlnorth_q4_2i = wwl_north(15,2,2)

!ocl simd_redundant_vl(5)
                        do p=0,4               ! parallel loop.
                           m1 = 11 + p                ! translating the indices (j,p) to 1-dim index
                           shinvrot1_q0_r = sh_inv_rot1(31+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q0_i = sh_inv_rot1(31+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q0_r = sh_inv_rot2(31+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q0_i = sh_inv_rot2(31+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q1_r = sh_inv_rot1(36+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q1_i = sh_inv_rot1(36+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q1_r = sh_inv_rot2(36+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q1_i = sh_inv_rot2(36+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q2_r = sh_inv_rot1(41+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q2_i = sh_inv_rot1(41+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q2_r = sh_inv_rot2(41+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q2_i = sh_inv_rot2(41+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q3_r = sh_inv_rot1(46+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q3_i = sh_inv_rot1(46+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q3_r = sh_inv_rot2(46+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q3_i = sh_inv_rot2(46+p,2,irz,iry,irx,ilevel)
                           shinvrot1_q4_r = sh_inv_rot1(51+p,1,irz,iry,irx,ilevel)
                           shinvrot1_q4_i = sh_inv_rot1(51+p,2,irz,iry,irx,ilevel)
                           shinvrot2_q4_r = sh_inv_rot2(51+p,1,irz,iry,irx,ilevel)
                           shinvrot2_q4_i = sh_inv_rot2(51+p,2,irz,iry,irx,ilevel)

                           tmp_ce_r = wlnorth_q0_1r * shinvrot1_q0_r + wlnorth_q0_1i * shinvrot2_q0_r &
                                  & + wlnorth_q1_1r * shinvrot1_q1_r + wlnorth_q1_1i * shinvrot2_q1_r &
                                  & + wlnorth_q2_1r * shinvrot1_q2_r + wlnorth_q2_1i * shinvrot2_q2_r &
                                  & + wlnorth_q3_1r * shinvrot1_q3_r + wlnorth_q3_1i * shinvrot2_q3_r &
                                  & + wlnorth_q4_1r * shinvrot1_q4_r + wlnorth_q4_1i * shinvrot2_q4_r
                           tmp_ce_i = wlnorth_q0_1r * shinvrot1_q0_i + wlnorth_q0_1i * shinvrot2_q0_i &
                                  & + wlnorth_q1_1r * shinvrot1_q1_i + wlnorth_q1_1i * shinvrot2_q1_i &
                                  & + wlnorth_q2_1r * shinvrot1_q2_i + wlnorth_q2_1i * shinvrot2_q2_i &
                                  & + wlnorth_q3_1r * shinvrot1_q3_i + wlnorth_q3_1i * shinvrot2_q3_i &
                                  & + wlnorth_q4_1r * shinvrot1_q4_i + wlnorth_q4_1i * shinvrot2_q4_i
                           wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,1,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) = wl_omp(m1,2,icz0_1,icy0_1,icx0_1,iam) + tmp_ce_i

                           tmp_ce_r = wlnorth_q0_2r * shinvrot1_q0_r + wlnorth_q0_2i * shinvrot2_q0_r &
                                  & + wlnorth_q1_2r * shinvrot1_q1_r + wlnorth_q1_2i * shinvrot2_q1_r &
                                  & + wlnorth_q2_2r * shinvrot1_q2_r + wlnorth_q2_2i * shinvrot2_q2_r &
                                  & + wlnorth_q3_2r * shinvrot1_q3_r + wlnorth_q3_2i * shinvrot2_q3_r &
                                  & + wlnorth_q4_2r * shinvrot1_q4_r + wlnorth_q4_2i * shinvrot2_q4_r
                           tmp_ce_i = wlnorth_q0_2r * shinvrot1_q0_i + wlnorth_q0_2i * shinvrot2_q0_i &
                                  & + wlnorth_q1_2r * shinvrot1_q1_i + wlnorth_q1_2i * shinvrot2_q1_i &
                                  & + wlnorth_q2_2r * shinvrot1_q2_i + wlnorth_q2_2i * shinvrot2_q2_i &
                                  & + wlnorth_q3_2r * shinvrot1_q3_i + wlnorth_q3_2i * shinvrot2_q3_i &
                                  & + wlnorth_q4_2r * shinvrot1_q4_i + wlnorth_q4_2i * shinvrot2_q4_i
                           wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,1,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_r
                           wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) = wl_omp(m1,2,icz0_2,icy0_2,icx0_2,iam) + tmp_ce_i
                        enddo

!---- end Outer Reduction Loop Type Rolled Code.
